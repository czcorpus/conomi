<detail>
    <div if={ state.error != null }>Error: { state.error.response ? JSON.stringify(state.error.response.data) : JSON.stringify(state.error)}</div>
    <div if={ state.report == null && state.error == null }>Loading...</div>
    <div if={ state.report != null && state.error == null }>
        <table>
            <caption>Identification:</caption>
            <thead>
                <tr>
                    <th>ID</th>
                    <th>App</th>
                    <th>Instance</th>
                    <th>Tag</th>
                    <th>Created</th>
                    <th>Severity</th>
                    <th>Resolved by</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>{ state.report.id }</td>
                    <td>{ state.report.sourceId.app }</td>
                    <td>{ state.report.sourceId.instance }</td>
                    <td>{ state.report.sourceId.tag }</td>
                    <td>{ state.report.created.toLocaleString() }</td>
                    <td>{ state.report.severity }</td>
                    <td if={ state.report.resolvedByUserId == -1 }>
                        <button class="button button-small" onclick={ () => resolveGroup(props.baseUrl, state.report.groupId) }>Resolve group</button>
                    </td>
                    <td if={ state.report.resolvedByUserId != -1 }>{
                        state.report.resolvedByUserName
                    }</td>
                </tr>
            </tbody>
        </table>

        <table>
            <caption>Message:</caption>
            <tbody>
                <tr>
                    <td>Subject</td>
                    <td>{ state.report.subject }</td>
                </tr>
                <tr>
                    <td>Body</td>
                    <td><raw content={ state.report.body }></raw></td>
                </tr>
                <tr>
                    <td>Args</td>
                    <td>{ state.report.args ? JSON.stringify(state.report.args) : null }</td>
                </tr>
            </tbody>
        </table>
    </div>

    <script>
        import axios from 'axios';
        import Raw from '../components/raw.riot';

        export default {
            components: {
                raw: Raw,
            },
            onBeforeMount(props, state) {
                this.state.report = null;
                this.state.isBusy = true;
                this.state.error = null;
                this.loadReport();
            },
            resolveGroup(baseUrl, groupId) {
                this.update({isBusy: true});
                axios.post(`${baseUrl}/api/resolve/${groupId}`)
                    .then(resp => this.loadReport())
                    .catch(error => this.update({
                        error,
                        isBusy: false,
                    }));
            },
            loadReport() {
                axios.get(`${this.props.baseUrl}/api/report/${this.props.reportId}`, {params: {"md-to-html": "1"}})
                    .then(resp => {
                        resp.data.created = new Date(resp.data.created);
                        this.update({
                            report: resp.data,
                            isBusy: false,
                        });
                    })
                    .catch(error => this.update({
                        error,
                        isBusy: false,
                    }));
            },
        }
    </script>
</detail>