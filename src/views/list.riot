<list>
    <div if={ state.error != null }>Error: { state.error.response ? JSON.stringify(state.error.response.data) : JSON.stringify(state.error)}</div>

    <form if={ state.filters != null }>
        <fieldset class="filters">
            <div class="filter">
                <label for="app">App:</label>
                <select id="app" value={ state.selected.app } onchange={ updateSelection }>
                    <option value="" selected={state.selected.app == ""}>all</option>
                    <option each={ app in state.filters.apps } value={ app } selected={state.selected.app == app}>{ app }</option>
                </select>
            </div>
            <div class="filter">
                <label for="instance">Instance:</label>
                <select id="instance" value={ state.selected.instance } onchange={ updateSelection }>
                    <option value="" selected={state.selected.instance == ""}>all</option>
                    <option each={ instance in state.filters.instances } value={ instance } selected={state.selected.instance == instance}>{ instance }</option>
                </select>
            </div>
            <div class="filter">
                <label for="tag">Tag:</label>
                <select id="tag" value={ state.selected.tag } onchange={ updateSelection }>
                    <option value="" selected={state.selected.tag == ""}>all</option>
                    <option each={ tag in state.filters.tags } value={ tag } selected={state.selected.tag == tag}>{ tag }</option>
                </select>
            </div>
        </fieldset>
        <fieldset class="additional-filters">
            <input type="checkbox" id="resolved" checked={ state.selected.resolved } onchange={ updateSelection }>
            <label for="resolved">display resolved</label>
        </fieldset>
        <hr>
    </form>

    <div if={ state.reports != null }>
        <table>
            <thead>
                <tr>
                    <th>Created</th>
                    <th>App</th>
                    <th>Instance</th>
                    <th>Tag</th>
                    <th>Severity</th>
                    <th>Subject</th>
                    <th if={ state.selected.resolved }>Resolved by</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                <tr each={report in state.reports} class={report.severity + (report.resolvedByUserId !== -1 ? " resolved" : "")}>
                    <td>{ report.created.toLocaleString() }</td>
                    <td>{ report.sourceId.app }</td>
                    <td>{ report.sourceId.instance }</td>
                    <td>{ report.sourceId.tag }</td>
                    <td>{ report.severity }</td>
                    <td>{ report.subject }</td>
                    <td if={ state.selected.resolved }>{ report.resolvedByUserName }</td>
                    <td><a class="button button-small" href={`detail?id=${report.id}`}>Detail</a></td>
                </tr>
            </tbody>
        </table>
    </div>

    <style>
        form {
            margin: 0em;
        }

        .filters {
            display: flex;
            margin: 0em;
        }

        .filter {
            flex-grow: 1;
            margin: 0em 0.1em;
        }

        .additional-filters {
            margin-bottom: 0em;
        }

        .additional-filters label, .additional-filters input {
            display: inline;
            font-weight: normal;
            margin: 0 0.1em;
        }

        th, td {
           padding: 0.1em 1em;
        }

        hr {
            margin: 0.5em;
        }
    </style>

    <script>
        import axios from 'axios';
        export default {
            onBeforeMount(props, state) {
                this.state.sources = null; // all available app, instance, tag identifiers
                this.state.selected = null; // selected filter
                this.state.filters = null; // avalable selectable values
                this.state.reports = null; // filtered reports
                this.state.error = null;
                this.state.isBusy = true;
                this.getSources();
            },
            updateSelection(event) {
                this.update({isBusy: true})
                const selected = this.state.selected;
                if (event.target.type === "checkbox") {
                    selected[event.target.id] = event.target.checked;
                } else {
                    selected[event.target.id] = event.target.value;
                }
                this.updateFilter(selected);
            },
            // retrieve list of all available sources
            getSources() {
                axios.get(this.props.baseUrl+"/api/sources")
                    .then(resp => {
                        this.update({sources: resp.data});
                        // initial filter select
                        this.updateFilter({
                            app: this.props.app ? this.props.app : "",
                            instance: this.props.instance ? this.props.instance : "",
                            tag: this.props.tag ? this.props.tag : "",
                            resolved: this.props.resolved ? this.props.resolved : false,
                        });
                    })
                    .catch(error => this.update({error}));
            },
            // process sources to get available filters from selection
            processSources(selected) {
                const apps = [];
                const instances = [];
                const tags = [];
                this.state.sources.forEach(source => {
                    if ((selected.instance == "" || source.instance == selected.instance) &&
                        (selected.tag == "" || source.tag == selected.tag ) &&
                        source.app != "" && !apps.includes(source.app)
                    ) {
                        apps.push(source.app)
                    }

                    if ((selected.app == "" || source.app == selected.app) &&
                        (selected.tag == "" || source.tag == selected.tag ) &&
                        source.instance != "" && !instances.includes(source.instance)
                    ) {
                        instances.push(source.instance)
                    }

                    if ((selected.app == "" || source.app == selected.app) &&
                        (selected.instance == "" || source.instance == selected.instance ) &&
                        source.tag != "" && !tags.includes(source.tag)
                    ) {
                        tags.push(source.tag)
                    }
                });
                return {apps, instances, tags, resolved: selected.resolved};
            },
            // update all data when changing selection
            updateFilter(selected) {
                axios.get(this.props.baseUrl+"/api/reports", {params: selected})
                    .then(resp => this.update({
                        reports: resp.data.map(item => {
                            item.created = new Date(item.created);
                            return item;
                        }),
                        selected,
                        filters: this.processSources(selected),
                        isBusy: false,
                    }))
                    .catch(error => this.update({
                        error,
                        isBusy: false,
                    }));
            },
        }
    </script>
</list>